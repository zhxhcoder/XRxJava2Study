package com.zhxh.rxjava2.samples.ui.operatorsimport android.os.Bundleimport android.support.v7.app.AppCompatActivityimport android.util.Logimport android.view.Viewimport android.widget.Buttonimport android.widget.TextViewimport com.zhxh.rxjava2.samples.Rimport com.zhxh.rxjava2.samples.utils.AppConstantimport java.util.concurrent.TimeUnitimport io.reactivex.Observableimport io.reactivex.android.schedulers.AndroidSchedulersimport io.reactivex.functions.Consumerimport io.reactivex.schedulers.Schedulers/** * Created by zhxh on 2018/1/18 */class WindowExampleActivity : AppCompatActivity() {    internal lateinit var btn: Button    internal lateinit var textView: TextView    val consumer: Consumer<Observable<Long>>        get() = Consumer { observable ->            Log.d(TAG, "Sub Divide begin....")            textView.append("Sub Divide begin ....")            textView.append(AppConstant.LINE_SEPARATOR)            observable                .subscribeOn(Schedulers.io())                .observeOn(AndroidSchedulers.mainThread())                .subscribe { value ->                    Log.d(TAG, "Next:" + value!!)                    textView.append("Next:$value")                    textView.append(AppConstant.LINE_SEPARATOR)                }        }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_example)        btn = findViewById(R.id.btn)        textView = findViewById(R.id.textView)        btn.setOnClickListener { doSomeWork() }    }    /*     * Example using window operator -> It periodically     * subdivide items from an Observable into     * Observable windows and emit these windows rather than     * emitting the items one at a time     */    protected fun doSomeWork() {        Observable.interval(1, TimeUnit.SECONDS).take(12)            .window(3, TimeUnit.SECONDS)            .subscribeOn(Schedulers.io())            .observeOn(AndroidSchedulers.mainThread())            .subscribe(consumer)    }    companion object {        private val TAG = WindowExampleActivity::class.java.simpleName    }}